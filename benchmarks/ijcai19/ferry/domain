(define (domain ferry)
(:types car location - object)
   (:predicates (not-eq ?x ?y - object)
		(at-ferry ?l - location)
		(at ?c - car ?l - location)
		(empty-ferry)
		(on ?c - car))

(:derived (invariant-1)
	(forall(?x - car ?y1 - location ?y2 - location)
		(not (and  (at ?x ?y1)  (at ?x ?y2) (not (= ?y1 ?y2)) ))))
(:derived (invariant-2)
	(forall (?x - car ?y1 - location)
		(not (and (at ?x ?y1) (on ?x)))))

   (:action sail
       :parameters  (?o1 - location ?o2 - location)
       :precondition ()
       :effect ())

   (:action board
       :parameters (?o1 - car ?o2 - location)
       :precondition  ()
       :effect ())

   (:action debark
       :parameters  (?o1 - car ?o2 - location)
       :precondition  ()
       :effect ())
)
