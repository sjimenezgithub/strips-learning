(define (problem strips-grid-y-2)
   (:domain grid)
   (:objects node0-0 node0-1 node0-2 node0-3
             node1-0 node1-1 node1-2 node1-3
	     node2-0 node2-1 node2-2 node2-3
	     node3-0 node3-1 node3-2 node3-3 - place
	     circle - shape
	     key0 key1 key2 key3 - key)
   (:init (arm-empty)
          (conn node0-0 node1-0)
          (conn node0-0 node0-1)
          (conn node0-1 node1-1)
          (conn node0-1 node0-2)
          (conn node0-1 node0-0)
          (conn node0-2 node1-2)
          (conn node0-2 node0-3)
          (conn node0-2 node0-1)
          (conn node0-3 node1-3)
          (conn node0-3 node0-2)
          (conn node1-0 node2-0)
          (conn node1-0 node0-0)
          (conn node1-0 node1-1)
          (conn node1-1 node2-1)
          (conn node1-1 node0-1)
          (conn node1-1 node1-2)
          (conn node1-1 node1-0)
          (conn node1-2 node2-2)
          (conn node1-2 node0-2)
          (conn node1-2 node1-3)
          (conn node1-2 node1-1)
          (conn node1-3 node2-3)
          (conn node1-3 node0-3)
          (conn node1-3 node1-2)
          (conn node2-0 node3-0)
          (conn node2-0 node1-0)
          (conn node2-0 node2-1)
          (conn node2-1 node3-1)
          (conn node2-1 node1-1)
          (conn node2-1 node2-2)
          (conn node2-1 node2-0)
          (conn node2-2 node3-2)
          (conn node2-2 node1-2)
          (conn node2-2 node2-3)
          (conn node2-2 node2-1)
          (conn node2-3 node3-3)
          (conn node2-3 node1-3)
          (conn node2-3 node2-2)
          (conn node3-0 node2-0)
          (conn node3-0 node3-1)
          (conn node3-1 node2-1)
          (conn node3-1 node3-2)
          (conn node3-1 node3-0)
          (conn node3-2 node2-2)
          (conn node3-2 node3-3)
          (conn node3-2 node3-1)
          (conn node3-3 node2-3)
          (conn node3-3 node3-2)
          (locked node2-2)
          (lock-shape node2-2 circle)
          (locked node3-2)
          (lock-shape node3-2 circle)
          (locked node2-3)
          (lock-shape node2-3 circle)
          (locked node1-3)
          (lock-shape node1-3 circle)
          (locked node3-3)
          (lock-shape node3-3 circle)
          (locked node3-1)
          (lock-shape node3-1 circle)          
          (locked node2-1)
          (lock-shape node2-1 circle)
          (open node0-0)
          (open node0-1)
          (open node0-2)
          (open node0-3)
          (open node1-0)
          (open node1-1)
          (open node1-2)
          (open node2-0)
          (open node3-0)
          (key-shape key0 circle)
          (at key0 node0-0)
          (key-shape key1 circle)
          (at key1 node1-3)
          (key-shape key2 circle)
          (at key2 node0-1)
          (key-shape key3 circle)
          (at key3 node2-3)
          (at-robot node0-0))
   (:goal (and (at key0 node3-3)
               (at key1 node0-3)
               (at key2 node3-0)
	       (at key3 node0-0))))